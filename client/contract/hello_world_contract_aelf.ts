// @generated by protoc-gen-aelf-es v1.0.0 with parameter "target=ts"
// @generated from file contract/hello_world_contract.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty } from "@bufbuild/protobuf";
import { Address } from "../aelf/core_pb.js";
import { Character } from "./hello_world_contract_pb.js";


type SendMethodResponse = { TransactionId: string; };

type SendMethod = <P>(methodName: string, p: P) => Promise<SendMethodResponse>;

type ViewMethod = <P, R>(methodName: string, p: P) => Promise<R>;

/**
 * @generated from service HelloWorld
 */
export class HelloWorldClient {

  private callSendMethod: SendMethod;

  private callViewMethod: ViewMethod;

  constructor(callSendMethod: SendMethod, callViewMethod: ViewMethod) {
    this.callSendMethod = callSendMethod;
    this.callViewMethod = callViewMethod;
  }

    /**
     * Actions
     * Define methods name and input/output.
     *
     * @generated from rpc HelloWorld.Initialize
     */
  async Initialize(request: Empty): Promise<SendMethodResponse> {
    // this is a send method
    return await this.callSendMethod<Empty>('Initialize', request);
    }

    /**
     * @generated from rpc HelloWorld.CreateCharacter
     */
  async CreateCharacter(request: Empty): Promise<SendMethodResponse> {
    // this is a send method
    return await this.callSendMethod<Empty>('CreateCharacter', request);
    }

    /**
     * Views
     *
     * @generated from rpc HelloWorld.GetMyCharacter
     */
  async GetMyCharacter(request: Address): Promise<Character> {
    // this is a view method
    return await this.callViewMethod<Address, Character>('GetMyCharacter', request);
    }
}

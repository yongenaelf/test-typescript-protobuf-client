//*
// AElf Standards ACS1(Transaction Fee Standard)
//
// Used to manage the transaction fee.

// @generated by protoc-gen-es v1.7.1 with parameter "target=ts"
// @generated from file base/acs1.proto (package acs1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message acs1.MethodFees
 */
export class MethodFees extends Message<MethodFees> {
  /**
   * The name of the method to be charged.
   *
   * @generated from field: string method_name = 1;
   */
  methodName = "";

  /**
   * List of fees to be charged.
   *
   * @generated from field: repeated acs1.MethodFee fees = 2;
   */
  fees: MethodFee[] = [];

  /**
   * Optional based on the implementation of SetMethodFee method.
   *
   * @generated from field: bool is_size_fee_free = 3;
   */
  isSizeFeeFree = false;

  constructor(data?: PartialMessage<MethodFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "acs1.MethodFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fees", kind: "message", T: MethodFee, repeated: true },
    { no: 3, name: "is_size_fee_free", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodFees {
    return new MethodFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodFees {
    return new MethodFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodFees {
    return new MethodFees().fromJsonString(jsonString, options);
  }

  static equals(a: MethodFees | PlainMessage<MethodFees> | undefined, b: MethodFees | PlainMessage<MethodFees> | undefined): boolean {
    return proto3.util.equals(MethodFees, a, b);
  }
}

/**
 * @generated from message acs1.MethodFee
 */
export class MethodFee extends Message<MethodFee> {
  /**
   * The token symbol of the method fee.
   *
   * @generated from field: string symbol = 1;
   */
  symbol = "";

  /**
   * The amount of fees to be charged.
   *
   * @generated from field: int64 basic_fee = 2;
   */
  basicFee = protoInt64.zero;

  constructor(data?: PartialMessage<MethodFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "acs1.MethodFee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "basic_fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodFee {
    return new MethodFee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodFee {
    return new MethodFee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodFee {
    return new MethodFee().fromJsonString(jsonString, options);
  }

  static equals(a: MethodFee | PlainMessage<MethodFee> | undefined, b: MethodFee | PlainMessage<MethodFee> | undefined): boolean {
    return proto3.util.equals(MethodFee, a, b);
  }
}

